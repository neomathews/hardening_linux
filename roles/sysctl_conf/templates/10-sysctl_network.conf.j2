#RED
######AÑADIR EL MODPROBE tcp_bbr al inicio########
######CAMBIAR EL NOMBRE DE INTERFAZ EN /proc/sys/net/ipv6/conf/eth0/autoconf Y accept_ra
##ICMP
net.ipv4.icmp_echo_ignore_all = 0
net.ipv4.icmp_echo_ignore_broadcasts = 1
##MENSAJES DE ERROR MAL FORMATEADOS
net.ipv4.icmp_ignore_bogus_error_responses = 1
##Deshabilitar la aceptación de redirecciones
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
##Prevent SYN attack, enable SYNcookies (they will kick-in when the max_syn_backlog reached)
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_synack_retries = 2
## RFC1337
net.ipv4.tcp_rfc1337 = 1
## Defines the local port range that is used by TCP and UDP
## to choose the local port
net.ipv4.ip_local_port_range = 1024 65535
## Log packets with impossible addresses to kernel log
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1
## Disable Explicit Congestion Notification in TCP
net.ipv4.tcp_ecn = 0
## Enable window scaling as defined in RFC1323
net.ipv4.tcp_window_scaling = 1
# Enable timestamps (RFC1323)
net.ipv4.tcp_timestamps = 1
## Enable select acknowledgments
net.ipv4.tcp_sack = 1
## Enable FACK congestion avoidance and fast restransmission
net.ipv4.tcp_fack = 1
## Allows TCP to send "duplicate" SACKs
net.ipv4.tcp_dsack = 1
## Controls IP packet forwarding
net.ipv4.ip_forward = 0
net.ipv4.conf.all.forwarding = 0
net.ipv4.conf.default.forwarding = 0
net.ipv6.conf.all.forwarding = 0
net.ipv6.conf.default.forwarding = 0
## Protección contra direcciones IP no válidas.0 (valor por omisión, no realizar
## ninguna comprobación), 1 (rechazar únicamente las suplantaciones
## evidentes) y 2 (realizar una comprobación exhaustiva)
net.ipv4.conf.default.rp_filter = 2
net.ipv4.conf.all.rp_filter = 2
## Enable fast recycling TIME-WAIT sockets
net.ipv4.tcp_tw_reuse = 1
## TODO : change TCP_SYNQ_HSIZE in include/net/tcp.h
## to keep TCP_SYNQ_HSIZE*16<=tcp_max_syn_backlog
net.ipv4.tcp_max_syn_backlog = 20000
## tells the kernel how many TCP sockets that are not attached
## to any user file handle to maintain
##net.ipv4.tcp_max_orphans = $max_orphan
net.ipv4.tcp_max_orphans = 16384
## How may times to retry before killing TCP connection, closed by our side
net.ipv4.tcp_orphan_retries = 0
## how long to keep sockets in the state FIN-WAIT-2
## if we were the one closing the socket
net.ipv4.tcp_fin_timeout = 20
## maximum number of sockets in TIME-WAIT to be held simultaneously
#net.ipv4.tcp_max_tw_buckets = $max_tw
net.ipv4.tcp_max_tw_buckets = 1440000
## don't cache ssthresh from previous connection
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.tcp_moderate_rcvbuf = 1
## increase Linux autotuning TCP buffer limits
net.ipv4.tcp_rmem = 8192 87380 16777216
net.ipv4.tcp_wmem = 8192 65536 16777216
net.ipv4.udp_rmem_min = 16384
net.ipv4.udp_wmem_min = 16384
net.core.rmem_default = 262144
net.core.wmem_default = 262144
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
## increase TCP max buffer size
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.core.netdev_max_backlog = 16384
net.core.somaxconn = 65000
net.core.dev_weight = 64
## Decrease the time default value for connections to keep alive
net.ipv4.tcp_keepalive_time = 300
net.ipv4.tcp_keepalive_probes = 5
net.ipv4.tcp_keepalive_intvl = 15
## Don't relay bootp
net.ipv4.conf.all.bootp_relay = 0
## Don't proxy arp for anyone
net.ipv4.conf.all.proxy_arp = 0
## Do not auto-configure IPv6
net.ipv6.conf.default.autoconf=0
net.ipv6.conf.default.accept_ra=0
net.ipv6.conf.ens160.autoconf=0
net.ipv6.conf.ens160.accept_ra=0
## Use BBR TCP congestion control and set tcp_notsent_lowat to 16384 to ensure HTTP/2 prioritization works optimally
## Do a 'modprobe tcp_bbr' first (kernel > 4.9)
## Fall-back to htcp if bbr is unavailable (older kernels)
net.ipv4.tcp_congestion_control = htcp
net.ipv4.tcp_congestion_control = bbr
net.ipv4.tcp_notsent_lowat = 16384
## Increase the maximum amount of option memory buffers
net.core.optmem_max = 65535
## Limit the maximum memory used to reassemble IP fragments (CVE-2018-5391)
net.ipv4.ipfrag_low_thresh = 196608
net.ipv6.ip6frag_low_thresh = 196608
net.ipv4.ipfrag_high_thresh = 262144
net.ipv6.ip6frag_high_thresh = 262144
## Increase size of RPC datagram queue length
net.unix.max_dgram_qlen = 512
## Don't allow the arp table to become bigger than this
net.ipv4.neigh.default.gc_thresh3 = 2048
## Tell the gc when to become aggressive with arp table cleaning.
## Adjust this based on size of the LAN. 1024 is suitable for most /24 networks
net.ipv4.neigh.default.gc_thresh2 = 1024
## Adjust where the gc will leave arp table alone - set to 32.
net.ipv4.neigh.default.gc_thresh1 = 32
## Adjust to arp table gc to clean-up more often
net.ipv4.neigh.default.gc_interval = 30
## Increase TCP queue length
net.ipv4.neigh.default.proxy_qlen = 96
net.ipv4.neigh.default.unres_qlen = 101
## How many times to retry killing an alive TCP connection
net.ipv4.tcp_retries2 = 15
net.ipv4.tcp_retries1 = 3
## Avoid falling back to slow start after a connection goes idle
## keeps our cwnd large with the keep alive connections (kernel > 3.6)
net.ipv4.tcp_slow_start_after_idle = 0
## Allow the TCP fastopen flag to be used, beware some firewalls do not like TFO! (kernel > 3.7)
net.ipv4.tcp_fastopen = 3
## This will enusre that immediatly subsequent connections use the new values
net.ipv4.route.flush = 1
net.ipv6.route.flush = 1
## For servers with tcp-heavy workloads, enable 'fq' queue management scheduler (kernel > 3.12)
